apply plugin: 'application'

repositories {
    mavenCentral()
}

dependencies {
   compile group: 'org.json', name: 'json', version: '20200518'
}

//define main class
mainClassName = 'Concentration'

    def host = 'localhost'
    def port = 8000
    def threads = 5

task arguments {
    if (project.hasProperty("host")) {
      host = project.getProperty("host")
    }
    if (project.hasProperty("port")) {
      port = project.getProperty("port")
    }
    if (project.hasProperty("threads")) {
      threads = project.getProperty("threads")
    }
}

// run with arguments e.g.: gradle runTask1 -Pport=9099 -q --console=plain
task runTask1(type: JavaExec) {
  group 'server'
  description 'Creates Server socket waits for messages'

  classpath = sourceSets.main.runtimeClasspath

  main = 'taskone.Server'
  standardInput = System.in
  
  args port  
  
}

// run with arguments e.g.: gradle runTask2 -Pport=9099 -q --console=plain
task runTask2(type: JavaExec) {
  group 'server'
  description 'Creates Server socket waits for messages'

  classpath = sourceSets.main.runtimeClasspath

  main = 'taskone.ThreadedServer'
  standardInput = System.in
  
  
  args port
}

// run with arguments e.g.: gradle runTask3 -Pport=9099 -Pthreads=5 -q --console=plain
task runTask3(type: JavaExec) {
  group 'server'
  description 'Creates Server socket waits for messages'

  classpath = sourceSets.main.runtimeClasspath

  main = 'taskone.ThreadPoolServer'
  standardInput = System.in
  
  
  args port
  args threads
}

// run with arguments e.g.: n
task runClient(type: JavaExec) {
  group 'client'
  description 'Creates client socket sends a message to the server'

  classpath = sourceSets.main.runtimeClasspath
  standardInput = System.in

  main = 'taskone.Client'
  standardInput = System.in
  
  
  args host
  args port
}

